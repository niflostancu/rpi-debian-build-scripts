#!/bin/bash
# Initramfs Post-Update hook to generate boot.img inside /boot
set -eo pipefail
source /usr/local/lib/rpi-debian-scripts.sh

version="$1"
if [[ -z "$version" ]]; then
	echo >&2 "W: rpi-boot-img: ${DPKG_MAINTSCRIPT_PACKAGE:-kernel package} did not pass a version number"
	exit 2
fi

RPI_CONFIG_FILE=/etc/initramfs/rpi-config.txt
RPI_CONFIG_RAW_FILE=/etc/initramfs/rpi-config-raw.txt
RPI_CMDLINE_FILE=/etc/initramfs/rpi-cmdline.txt
RPI_FIRMWARE_DIR=/boot/firmware
BOOTRD_IMG=/boot/boot.img
BOOTRD_SIZE="${RPI_BOOT_RAMDISK_SIZE:-32}"  # MB
BOOTRD_MOUNTPOINT=/tmp/rpi-boot-img

# read config vars
source /etc/initramfs/rpi-vars.sh

RPI_CONFIG=$(cat "$RPI_CONFIG_FILE")
RPI_CONFIG_RAW=$(cat "$RPI_CONFIG_RAW_FILE")
RPI_CMDLINE=$(cat "$RPI_CMDLINE_FILE" | head -1)
[[ -z "$RPI_CONFIG_EXTRA" ]] || RPI_CONFIG+="
$RPI_CONFIG_EXTRA"
[[ -z "$RPI_CMDLINE_EXTRA" ]] || RPI_CMDLINE+=" $RPI_CMDLINE_EXTRA"

INTERPOLATE_VARS=(
	"ROOTFS_PARTITION=$INITRAMFS_ROOT_DEVICE"
)

# Downloads external firmware files from raspberrypi/firmware
function download_firmware_files() {
	for file in "${RPI_FIRMWARE_FILES[@]}"; do
		if [[ "$file" == "/"* ]]; then
			# absolute path, copy it
			cp -f "$file" "$1/$(basename "$file")"
		else
			# download the latest rpi firmware files (debian repo is outdated)
			mkdir -p "$1/$(dirname "$file")"
			wget "https://github.com/raspberrypi/firmware/raw/master/boot/$file" \
				-O "$1/$file"
		fi
	done
}

# Builds the RPI firmware partition as configured by vars
function build_firmware_partition() {
	local DEST="$1"
	# copy kernels
	INTERPOLATE_VARS+=("CONFIG_KERNEL=vmlinuz-$version")
	INTERPOLATE_VARS+=("CONFIG_INITRD=initrd.img-$version")
	cp -f "/boot/vmlinuz-$version" "$DEST/"
	cp -f "/boot/initrd.img-$version" "$DEST/"

	if [[ ! "$RPI_FIRMWARE_DIR" =~ ^1|y(es)?$ ]]; then
		download_firmware_files "$DEST"
	fi
	if [[ ! "$RPI_SKIP_BOOT_CONFIG" =~ ^1|y(es)?$ ]]; then
		# save config txts to /boot/firmware
		interpolate_vars "$RPI_CONFIG" "${INTERPOLATE_VARS[@]}" > "$DEST/config.txt"
		interpolate_vars "$RPI_CMDLINE" "${INTERPOLATE_VARS[@]}" > "$DEST/cmdline.txt"
	fi
}

if [[ "$RPI_SKIP_BOOT_RAMDISK" =~ ^1|y(es)?$ ]]; then
	log_info "Building firmware files in '$RPI_FIRMWARE_DIR' (ver. $version)"
	mkdir -p "$RPI_FIRMWARE_DIR"
	build_firmware_partition "$RPI_FIRMWARE_DIR"
	log_debug $'Firmware dir contents: \n' "$(ls -lh "$MOUNT_TMP$RPI_FIRMWARE_DIR")"
	# aaand we're done!
	exit 0
fi

log_info "Running RPI ramdisk generator for version $version..."

dd if=/dev/zero bs=1M count=$BOOTRD_SIZE of="$BOOTRD_IMG"
losetup /dev/loop8 "$BOOTRD_IMG"
# close the loop device on every exit status using a trap
cleanup() {
	set +e
	umount /dev/loop8
	losetup -d /dev/loop8
}
trap 'cleanup' EXIT

# Format the boot img partition as FAT32
mkfs.vfat -n RPI_BOOT_RD /dev/loop8
mkdir -p "$BOOTRD_MOUNTPOINT"
mount /dev/loop8 "$BOOTRD_MOUNTPOINT"

build_firmware_partition "$BOOTRD_MOUNTPOINT"
if [[ ! "$RPI_SKIP_BOOT_CONFIG" =~ ^1|y(es)?$ ]]; then
	interpolate_vars "$RPI_CONFIG_RAW" "${INTERPOLATE_VARS[@]}" > "/boot/config-raw.txt"
fi

log_info "RPI boot ramdisk '$BOOTRD_IMG' successfull generated!"
log_debug $'Boot ramdisk contents: \n' "$(ls -lh "$MOUNT_TMP$BOOTRD_MOUNTPOINT")"

exit 0

